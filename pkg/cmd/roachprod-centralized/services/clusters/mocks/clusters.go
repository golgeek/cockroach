// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package clustersmock

import (
	context "context"

	tasks "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/models/tasks"
	models "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/services/clusters/models"
	logger "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/utils/logger"
	cloudcluster "github.com/cockroachdb/cockroach/pkg/roachprod/cloud/types"
	vm "github.com/cockroachdb/cockroach/pkg/roachprod/vm"
	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) CreateCluster(
	_a0 context.Context, _a1 *logger.Logger, _a2 models.InputCreateClusterDTO,
) (*cloudcluster.Cluster, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *cloudcluster.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, models.InputCreateClusterDTO) (*cloudcluster.Cluster, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, models.InputCreateClusterDTO) *cloudcluster.Cluster); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudcluster.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, models.InputCreateClusterDTO) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) DeleteCluster(
	_a0 context.Context, _a1 *logger.Logger, _a2 models.InputDeleteClusterDTO,
) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, models.InputDeleteClusterDTO) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllClusters provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) GetAllClusters(
	_a0 context.Context, _a1 *logger.Logger, _a2 models.InputGetAllClustersDTO,
) (cloudcluster.Clusters, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetAllClusters")
	}

	var r0 cloudcluster.Clusters
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, models.InputGetAllClustersDTO) (cloudcluster.Clusters, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, models.InputGetAllClustersDTO) cloudcluster.Clusters); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloudcluster.Clusters)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, models.InputGetAllClustersDTO) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDNSZoneVMs provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) GetAllDNSZoneVMs(
	_a0 context.Context, _a1 *logger.Logger, _a2 string,
) (vm.List, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDNSZoneVMs")
	}

	var r0 vm.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) (vm.List, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) vm.List); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vm.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) GetCluster(
	_a0 context.Context, _a1 *logger.Logger, _a2 models.InputGetClusterDTO,
) (*cloudcluster.Cluster, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *cloudcluster.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, models.InputGetClusterDTO) (*cloudcluster.Cluster, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, models.InputGetClusterDTO) *cloudcluster.Cluster); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudcluster.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, models.InputGetClusterDTO) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sync provides a mock function with given fields: ctx, l
func (_m *IService) Sync(ctx context.Context, l *logger.Logger) (cloudcluster.Clusters, error) {
	ret := _m.Called(ctx, l)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 cloudcluster.Clusters
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) (cloudcluster.Clusters, error)); ok {
		return rf(ctx, l)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) cloudcluster.Clusters); ok {
		r0 = rf(ctx, l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloudcluster.Clusters)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger) error); ok {
		r1 = rf(ctx, l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncClouds provides a mock function with given fields: _a0, _a1
func (_m *IService) SyncClouds(_a0 context.Context, _a1 *logger.Logger) (tasks.ITask, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SyncClouds")
	}

	var r0 tasks.ITask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) (tasks.ITask, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) tasks.ITask); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.ITask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCluster provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) UpdateCluster(
	_a0 context.Context, _a1 *logger.Logger, _a2 models.InputUpdateClusterDTO,
) (*cloudcluster.Cluster, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 *cloudcluster.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, models.InputUpdateClusterDTO) (*cloudcluster.Cluster, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, models.InputUpdateClusterDTO) *cloudcluster.Cluster); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudcluster.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, models.InputUpdateClusterDTO) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
