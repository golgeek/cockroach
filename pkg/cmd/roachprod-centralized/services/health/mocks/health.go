// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package healthmock

import (
	context "context"

	repositorieshealth "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/repositories/health"
	tasks "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/services/health/tasks"
	logger "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/utils/logger"
	mock "github.com/stretchr/testify/mock"
)

// IHealthService is an autogenerated mock type for the IHealthService type
type IHealthService struct {
	mock.Mock
}

// CleanupDeadInstances provides a mock function with given fields: ctx, l, opts
func (_m *IHealthService) CleanupDeadInstances(
	ctx context.Context, l *logger.Logger, opts tasks.CleanupOptions,
) (int, error) {
	ret := _m.Called(ctx, l, opts)

	if len(ret) == 0 {
		panic("no return value specified for CleanupDeadInstances")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, tasks.CleanupOptions) (int, error)); ok {
		return rf(ctx, l, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, tasks.CleanupOptions) int); ok {
		r0 = rf(ctx, l, opts)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, tasks.CleanupOptions) error); ok {
		r1 = rf(ctx, l, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthyInstances provides a mock function with given fields: ctx, l
func (_m *IHealthService) GetHealthyInstances(
	ctx context.Context, l *logger.Logger,
) ([]repositorieshealth.InstanceInfo, error) {
	ret := _m.Called(ctx, l)

	if len(ret) == 0 {
		panic("no return value specified for GetHealthyInstances")
	}

	var r0 []repositorieshealth.InstanceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) ([]repositorieshealth.InstanceInfo, error)); ok {
		return rf(ctx, l)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) []repositorieshealth.InstanceInfo); ok {
		r0 = rf(ctx, l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositorieshealth.InstanceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger) error); ok {
		r1 = rf(ctx, l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceID provides a mock function with no fields
func (_m *IHealthService) GetInstanceID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsInstanceHealthy provides a mock function with given fields: ctx, l, instanceID
func (_m *IHealthService) IsInstanceHealthy(
	ctx context.Context, l *logger.Logger, instanceID string,
) (bool, error) {
	ret := _m.Called(ctx, l, instanceID)

	if len(ret) == 0 {
		panic("no return value specified for IsInstanceHealthy")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) (bool, error)); ok {
		return rf(ctx, l, instanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) bool); ok {
		r0 = rf(ctx, l, instanceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, string) error); ok {
		r1 = rf(ctx, l, instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInstance provides a mock function with given fields: ctx, l, instanceID, hostname
func (_m *IHealthService) RegisterInstance(
	ctx context.Context, l *logger.Logger, instanceID string, hostname string,
) error {
	ret := _m.Called(ctx, l, instanceID, hostname)

	if len(ret) == 0 {
		panic("no return value specified for RegisterInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string, string) error); ok {
		r0 = rf(ctx, l, instanceID, hostname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIHealthService creates a new instance of IHealthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIHealthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IHealthService {
	mock := &IHealthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
