// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package healthrepmock

import (
	context "context"
	time "time"

	health "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/repositories/health"
	logger "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/utils/logger"
	mock "github.com/stretchr/testify/mock"
)

// IHealthRepository is an autogenerated mock type for the IHealthRepository type
type IHealthRepository struct {
	mock.Mock
}

// CleanupDeadInstances provides a mock function with given fields: ctx, l, timeout, retentionPeriod, batchSize
func (_m *IHealthRepository) CleanupDeadInstances(
	ctx context.Context,
	l *logger.Logger,
	timeout time.Duration,
	retentionPeriod time.Duration,
	batchSize int,
) (int, error) {
	ret := _m.Called(ctx, l, timeout, retentionPeriod, batchSize)

	if len(ret) == 0 {
		panic("no return value specified for CleanupDeadInstances")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, time.Duration, time.Duration, int) (int, error)); ok {
		return rf(ctx, l, timeout, retentionPeriod, batchSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, time.Duration, time.Duration, int) int); ok {
		r0 = rf(ctx, l, timeout, retentionPeriod, batchSize)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, time.Duration, time.Duration, int) error); ok {
		r1 = rf(ctx, l, timeout, retentionPeriod, batchSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthyInstances provides a mock function with given fields: ctx, l, timeout
func (_m *IHealthRepository) GetHealthyInstances(
	ctx context.Context, l *logger.Logger, timeout time.Duration,
) ([]health.InstanceInfo, error) {
	ret := _m.Called(ctx, l, timeout)

	if len(ret) == 0 {
		panic("no return value specified for GetHealthyInstances")
	}

	var r0 []health.InstanceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, time.Duration) ([]health.InstanceInfo, error)); ok {
		return rf(ctx, l, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, time.Duration) []health.InstanceInfo); ok {
		r0 = rf(ctx, l, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]health.InstanceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, time.Duration) error); ok {
		r1 = rf(ctx, l, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: ctx, l, instanceID
func (_m *IHealthRepository) GetInstance(
	ctx context.Context, l *logger.Logger, instanceID string,
) (*health.InstanceInfo, error) {
	ret := _m.Called(ctx, l, instanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *health.InstanceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) (*health.InstanceInfo, error)); ok {
		return rf(ctx, l, instanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) *health.InstanceInfo); ok {
		r0 = rf(ctx, l, instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.InstanceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, string) error); ok {
		r1 = rf(ctx, l, instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasRecentCleanupTask provides a mock function with given fields: ctx, l, taskType, threshold
func (_m *IHealthRepository) HasRecentCleanupTask(
	ctx context.Context, l *logger.Logger, taskType string, threshold time.Time,
) (bool, error) {
	ret := _m.Called(ctx, l, taskType, threshold)

	if len(ret) == 0 {
		panic("no return value specified for HasRecentCleanupTask")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string, time.Time) (bool, error)); ok {
		return rf(ctx, l, taskType, threshold)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string, time.Time) bool); ok {
		r0 = rf(ctx, l, taskType, threshold)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, string, time.Time) error); ok {
		r1 = rf(ctx, l, taskType, threshold)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsInstanceHealthy provides a mock function with given fields: ctx, l, instanceID, timeout
func (_m *IHealthRepository) IsInstanceHealthy(
	ctx context.Context, l *logger.Logger, instanceID string, timeout time.Duration,
) (bool, error) {
	ret := _m.Called(ctx, l, instanceID, timeout)

	if len(ret) == 0 {
		panic("no return value specified for IsInstanceHealthy")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string, time.Duration) (bool, error)); ok {
		return rf(ctx, l, instanceID, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string, time.Duration) bool); ok {
		r0 = rf(ctx, l, instanceID, timeout)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, string, time.Duration) error); ok {
		r1 = rf(ctx, l, instanceID, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInstance provides a mock function with given fields: ctx, l, instance
func (_m *IHealthRepository) RegisterInstance(
	ctx context.Context, l *logger.Logger, instance health.InstanceInfo,
) error {
	ret := _m.Called(ctx, l, instance)

	if len(ret) == 0 {
		panic("no return value specified for RegisterInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, health.InstanceInfo) error); ok {
		r0 = rf(ctx, l, instance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHeartbeat provides a mock function with given fields: ctx, l, instanceID
func (_m *IHealthRepository) UpdateHeartbeat(
	ctx context.Context, l *logger.Logger, instanceID string,
) error {
	ret := _m.Called(ctx, l, instanceID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHeartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) error); ok {
		r0 = rf(ctx, l, instanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIHealthRepository creates a new instance of IHealthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIHealthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IHealthRepository {
	mock := &IHealthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
